generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  COMPANY
  ADMIN
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password String     
  role      UserRole
  createdAt DateTime   @default(now())
  // Relations
  candidate Candidate?
  company   Company?
}

model Candidate {
  id             String           @id @default(uuid())
  name           String
  dob            DateTime
  role           String
  bio            String?
  nationality    String
  location       String?
  gender         String?
  education      String
  experience     String
  maritalStatus  String?
  phone          String?
  resumeUrl      String?
  linkedin       String?
  facebook       String?
  instagram      String?
  website        String?
  email          String           @unique
  createdAt      DateTime         @default(now())
  profilePicture String?
  favoriteJobs   FavoriteJob[]
  appliedJobs    JobApplication[]
  savedJobs      SavedJob[]
  skills         Json?
  user           User?            @relation(fields: [userId], references: [id])
  userId         String?          @unique
  certificates   String[]
  savedByCompanies SavedCandidate[]
}

model Company {
  id             String   @id @default(uuid())
  name           String
  logo String?
  banner String?
  founded        DateTime
  description    String
  benefits       Json
  industry       String
  phone          String
  teamSize       String
  vision         String?
  email          String   @unique
  website        String?
  createdAt      DateTime @default(now())
  jobs           Job[]
  location       String
  facebook String?
  twitter String?
  instagram String?
  youtube String?
  organizationType String?
  user           User?    @relation(fields: [userId], references: [id])
userId         String?  @unique
savedCandidates SavedCandidate[]
}

model Job {
  id           String           @id @default(uuid())
  title        String
  description  String
  requirements Json
  desirable    Json
  benefits     Json
  jobType      String?
  jobLevel     String?
  experience   String
  education    String
  jobTags      Json
  salary       Int              @default(1000)
  country     String
  city     String
  companyId    String
  createdAt    DateTime         @default(now())
  expiredAt    DateTime?        @default(dbgenerated("now() + interval '7 days'"))
  favoriteJobs FavoriteJob[]
  company      Company          @relation(fields: [companyId], references: [id])
  applications JobApplication[]
  savedJobs    SavedJob[]
}

model JobApplication {
  id          String    @id @default(uuid())
  candidateId String
  jobId       String
  status      String    @default("applied")
  appliedAt   DateTime  @default(now())
  coverLetter    String? @default("")
  job         Job       @relation(fields: [jobId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model SavedJob {
  id          String    @id @default(uuid())
  candidateId String
  jobId       String
  createdAt   DateTime  @default(now())
  job         Job       @relation(fields: [jobId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model FavoriteJob {
  id          String    @id @default(uuid())
  candidateId String
  jobId       String
  createdAt   DateTime  @default(now())
  job         Job       @relation(fields: [jobId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model SavedCandidate {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  note String?

  @@unique([companyId, candidateId])
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  FREELANCE
}
